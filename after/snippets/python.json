{
  "Dictionary comprehension": { "prefix": "dc",     "body": "{${4:new_key}: ${5:new_value} for ${1:key}, ${2:value} in ${3:iterable}}$0" },
  "Generator comprehension":  { "prefix": "gc",     "body": "(${3:new_value} for ${1:value} in ${2:iterable})$0" },
  "List comprehension":       { "prefix": "lc",     "body": "[${3:new_value} for ${1:value} in ${2:iterable}]$0" },
  "Set comprehension":        { "prefix": "sc",     "body": "{${3:new_value} for ${1:value} in ${2:iterable}}$0" },
  "class":                    { "prefix": "class",  "body": "class ${1:classname}(${2:object}):\n\t${0:pass}" },
  "def (abstract method)":    { "prefix": "defa",   "body": "def ${1:funcname}(self${2:}):\n\traise NotImplementedError$0" },
  "def (method)":             { "prefix": "defc",   "body": "def ${1:funcname}(self${2:}):\n\t${0:pass}" },
  "def (static method)":      { "prefix": "defs",   "body": "@staticmethod\ndef ${1:funcname}($2):\n\t${0:pass}" },
  "def":                      { "prefix": "def",    "body": "def ${1:funcname}($2):\n\t${0:pass}" },
  "else":                     { "prefix": "    el", "body": "else:\n${0:pass}" },
  "elseif":                   { "prefix": "eif",    "body": "elif $1:\n\t${0:pass}" },
  "for":                      { "prefix": "for",    "body": "for ${1:target_list} in ${2:expression_list}:\n\t${0:pass}" },
  "from-import":              { "prefix": "fim",    "body": "from $1 import $0" },
  "if":                       { "prefix": "if",     "body": "if $1:\n\t${0:pass}" },
  "if-else":                  { "prefix": "ife",    "body": "if $1:\n\t${0:pass}\nelse:\n\tpass" },
  "if-main":                  { "prefix": "ifmain", "body": "if __name__ == \"__main__\":\n\t${0:pass}" },
  "import as":                { "prefix": "ima",    "body": "import $1 as $0" },
  "import":                   { "prefix": "im",     "body": "import $0" },
  "lambda":                   { "prefix": "lambda", "body": "lambda $1: ${2:expression}" },
  "try-except":               { "prefix": "tryex",  "body": "try:\n\t${0:pass}\nexcept ${1:expression} as ${2:identifier}:\n\tpass" },
  "try-finally":              { "prefix": "tryfin", "body": "try:\n\t${0:pass}\nfinally:\n\tpass" },
  "while":                    { "prefix": "wh",     "body": "while ${1:expression}:\n\t${0:pass}" },
  "with":                     { "prefix": "with",   "body": "with ${1:expression} as ${2:target}:\n\t${0:pass}" }
}
